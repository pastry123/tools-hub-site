import Groq from 'groq-sdk';

const groq = new Groq({
  apiKey: process.env.GROQ_API_KEY,
});

export interface AIDetectionResult {
  isAI: boolean;
  confidence: number;
  indicators: string[];
  analysis: string;
}

export interface HumanizationResult {
  humanizedText: string;
  changes: string[];
  readabilityScore: number;
}

export class AITextService {
  async detectAIText(text: string): Promise<AIDetectionResult> {
    if (!text || text.trim().length < 10) {
      throw new Error('Text must be at least 10 characters long');
    }

    try {
      const prompt = `Analyze the following text and determine if it was likely written by AI or a human. Provide:
1. A boolean assessment (AI or Human)
2. Confidence percentage (0-100)
3. Specific indicators that support your assessment
4. A brief analysis explaining your reasoning

Focus on patterns like:
- Repetitive sentence structures
- Overly formal or robotic language
- Lack of personal voice or emotion
- Perfect grammar without natural imperfections
- Generic or templated phrasing
- Unnatural flow or transitions

Text to analyze:
"${text}"

Respond in JSON format:
{
  "isAI": boolean,
  "confidence": number,
  "indicators": ["indicator1", "indicator2"],
  "analysis": "brief explanation"
}`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "You are an expert AI text detector. Analyze text patterns to determine if content was generated by AI or written by humans. Be thorough and accurate in your assessment."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama3-8b-8192",
        temperature: 0.1,
        max_tokens: 1000,
      });

      const response = completion.choices[0]?.message?.content;
      if (!response) {
        throw new Error('No response from AI service');
      }

      // Parse JSON response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Invalid response format');
      }

      const result = JSON.parse(jsonMatch[0]);
      
      return {
        isAI: result.isAI || false,
        confidence: Math.min(100, Math.max(0, result.confidence || 50)),
        indicators: Array.isArray(result.indicators) ? result.indicators : [],
        analysis: result.analysis || "Analysis unavailable"
      };

    } catch (error) {
      console.error('AI Detection Error:', error);
      throw new Error('Failed to analyze text for AI detection');
    }
  }

  async humanizeText(text: string): Promise<HumanizationResult> {
    if (!text || text.trim().length < 10) {
      throw new Error('Text must be at least 10 characters long');
    }

    try {
      const prompt = `Rewrite the following text to make it sound more human and natural while preserving the original meaning. Make these improvements:

1. Add natural language variations
2. Include subtle imperfections that humans make
3. Use more conversational tone where appropriate
4. Add personality and voice
5. Improve flow and readability
6. Remove robotic or overly formal language

Original text:
"${text}"

Please provide:
1. The humanized version
2. List of specific changes made
3. Readability score (0-100)

Respond in JSON format:
{
  "humanizedText": "improved text here",
  "changes": ["change1", "change2"],
  "readabilityScore": number
}`;

      const completion = await groq.chat.completions.create({
        messages: [
          {
            role: "system",
            content: "You are an expert writing coach who specializes in making AI-generated text sound more human and natural. Focus on adding personality, natural flow, and human-like imperfections while maintaining meaning and quality."
          },
          {
            role: "user",
            content: prompt
          }
        ],
        model: "llama3-8b-8192",
        temperature: 0.7,
        max_tokens: 2000,
      });

      const response = completion.choices[0]?.message?.content;
      if (!response) {
        throw new Error('No response from AI service');
      }

      // Parse JSON response
      const jsonMatch = response.match(/\{[\s\S]*\}/);
      if (!jsonMatch) {
        throw new Error('Invalid response format');
      }

      const result = JSON.parse(jsonMatch[0]);
      
      return {
        humanizedText: result.humanizedText || text,
        changes: Array.isArray(result.changes) ? result.changes : [],
        readabilityScore: Math.min(100, Math.max(0, result.readabilityScore || 75))
      };

    } catch (error) {
      console.error('Text Humanization Error:', error);
      throw new Error('Failed to humanize text');
    }
  }
}

export const aiTextService = new AITextService();