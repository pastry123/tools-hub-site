import { useState, useRef } from "react";
import { PDFDocument, rgb } from "pdf-lib";
import { Button } from "@/components/ui/button";

export default function PDFEditor() {
  const [pdfDoc, setPdfDoc] = useState(null);
  const [url, setUrl] = useState(null);
  const fileInputRef = useRef(null);
  const [transparentField, setTransparentField] = useState(false);

  async function loadPdf(e) {
    const file = e.target.files[0];
    const arrayBuffer = await file.arrayBuffer();

    const loadedPdf = await PDFDocument.load(arrayBuffer, {
      updateMetadata: true,
      ignoreEncryption: true,
    });

    setPdfDoc(loadedPdf);
    const blob = new Blob([arrayBuffer], { type: "application/pdf" });
    setUrl(URL.createObjectURL(blob));
  }

  async function addEditableTextField() {
    if (!pdfDoc) return;
    const form = pdfDoc.getForm();
    const pages = pdfDoc.getPages();
    const firstPage = pages[0];

    const textField = form.createTextField("toolhub-edit-field" + Date.now());
    textField.setText("Edit me");
    textField.addToPage(firstPage, {
      x: 50,
      y: firstPage.getHeight() - 100,
      width: 300,
      height: 24,
      textColor: rgb(0, 0, 0),
      backgroundColor: transparentField ? undefined : rgb(1, 1, 1),
      borderColor: rgb(0.5, 0.5, 0.5),
      borderWidth: 1,
    });

    form.updateFieldAppearances();

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    setUrl(URL.createObjectURL(blob));
  }

  async function addImageToFirstPage(e) {
    if (!pdfDoc || !e.target.files[0]) return;
    const file = e.target.files[0];
    const imageBytes = await file.arrayBuffer();
    const pages = pdfDoc.getPages();
    const firstPage = pages[0];
    const { width, height } = firstPage.getSize();

    let img;
    if (file.type === "image/jpeg") {
      img = await pdfDoc.embedJpg(imageBytes);
    } else {
      img = await pdfDoc.embedPng(imageBytes);
    }

    const imgDims = img.scale(0.5);

    firstPage.drawImage(img, {
      x: width / 2 - imgDims.width / 2,
      y: height / 2 - imgDims.height / 2,
      width: imgDims.width,
      height: imgDims.height,
    });

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    setUrl(URL.createObjectURL(blob));
  }

  async function downloadPdf() {
    if (!pdfDoc) return;
    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "edited.pdf";
    a.click();
  }

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-2xl font-bold">ToolHub PDF Editor</h1>
      <input type="file" accept="application/pdf" onChange={loadPdf} ref={fileInputRef} />
      {url && (
        <iframe
          src={url}
          className="w-full h-[500px] border"
          title="PDF Preview"
        ></iframe>
      )}
      <div className="space-x-2">
        <Button onClick={addEditableTextField}>Add Editable Text</Button>
        <label className="cursor-pointer inline-block">
          <span className="px-3 py-2 bg-gray-200 rounded">Add Image</span>
          <input
            type="file"
            accept="image/png, image/jpeg"
            className="hidden"
            onChange={addImageToFirstPage}
          />
        </label>
        <Button onClick={downloadPdf}>Download PDF</Button>
      </div>
      <label className="block pt-2">
        <input
          type="checkbox"
          checked={transparentField}
          onChange={(e) => setTransparentField(e.target.checked)}
          className="mr-2"
        />
        Transparent Background
      </label>
    </div>
  );
}
