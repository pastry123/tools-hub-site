import { useState, useRef, useEffect } from "react";
import { PDFDocument, rgb } from "pdf-lib";
import { Button } from "@/components/ui/button";

export default function PDFEditor() {
  const [pdfDoc, setPdfDoc] = useState(null);
  const [url, setUrl] = useState(null);
  const fileInputRef = useRef(null);
  const overlayRef = useRef(null);
  const [transparentField, setTransparentField] = useState(false);
  const [fields, setFields] = useState([]);

  async function loadPdf(e) {
    const file = e.target.files[0];
    const arrayBuffer = await file.arrayBuffer();
    const loadedPdf = await PDFDocument.load(arrayBuffer, {
      updateMetadata: true,
      ignoreEncryption: true,
    });
    setPdfDoc(loadedPdf);
    const blob = new Blob([arrayBuffer], { type: "application/pdf" });
    setUrl(URL.createObjectURL(blob));
  }

  function addDraggableText() {
    const id = Date.now();
    setFields([...fields, { id, x: 100, y: 100, text: "Edit me", width: 150, height: 30 }]);
  }

  function updateField(id, updates) {
    setFields(fields.map(f => f.id === id ? { ...f, ...updates } : f));
  }

  async function renderToPdf() {
    if (!pdfDoc) return;
    const page = pdfDoc.getPages()[0];
    fields.forEach(field => {
      page.drawText(field.text, {
        x: field.x,
        y: page.getHeight() - field.y - field.height,
        size: 12,
        color: rgb(0, 0, 0),
        ...(transparentField ? {} : { backgroundColor: rgb(1, 1, 1) }),
      });
    });

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    setUrl(URL.createObjectURL(blob));
    setFields([]);
  }

  return (
    <div className="p-6 space-y-4">
      <h1 className="text-2xl font-bold">ToolHub PDF Editor</h1>
      <input type="file" accept="application/pdf" onChange={loadPdf} ref={fileInputRef} />
      <div className="relative w-full h-[500px] border">
        {url && (
          <>
            <iframe
              src={url}
              className="w-full h-full absolute z-0"
              title="PDF Preview"
            ></iframe>
            <div ref={overlayRef} className="absolute inset-0 z-10">
              {fields.map(field => (
                <textarea
                  key={field.id}
                  value={field.text}
                  onChange={e => updateField(field.id, { text: e.target.value })}
                  onMouseDown={e => {
                    const offsetX = e.nativeEvent.offsetX;
                    const offsetY = e.nativeEvent.offsetY;
                    const onMove = moveEvent => {
                      updateField(field.id, {
                        x: moveEvent.clientX - offsetX,
                        y: moveEvent.clientY - offsetY,
                      });
                    };
                    const onUp = () => {
                      document.removeEventListener("mousemove", onMove);
                      document.removeEventListener("mouseup", onUp);
                    };
                    document.addEventListener("mousemove", onMove);
                    document.addEventListener("mouseup", onUp);
                  }}
                  style={{
                    position: "absolute",
                    left: field.x,
                    top: field.y,
                    width: field.width,
                    height: field.height,
                    background: transparentField ? "transparent" : "white",
                    border: "1px solid #aaa",
                    resize: "both",
                  }}
                />
              ))}
            </div>
          </>
        )}
      </div>
      <div className="space-x-2">
        <Button onClick={addDraggableText}>Add Editable Text</Button>
        <Button onClick={renderToPdf}>Apply Changes to PDF</Button>
        <label className="cursor-pointer inline-block">
          <span className="px-3 py-2 bg-gray-200 rounded">Add Image</span>
          <input
            type="file"
            accept="image/png, image/jpeg"
            className="hidden"
            onChange={addImageToFirstPage}
          />
        </label>
        <Button onClick={downloadPdf}>Download PDF</Button>
      </div>
      <label className="block pt-2">
        <input
          type="checkbox"
          checked={transparentField}
          onChange={(e) => setTransparentField(e.target.checked)}
          className="mr-2"
        />
        Transparent Background
      </label>
    </div>
  );

  async function addImageToFirstPage(e) {
    if (!pdfDoc || !e.target.files[0]) return;
    const file = e.target.files[0];
    const imageBytes = await file.arrayBuffer();
    const pages = pdfDoc.getPages();
    const firstPage = pages[0];
    const { width, height } = firstPage.getSize();

    let img;
    if (file.type === "image/jpeg") {
      img = await pdfDoc.embedJpg(imageBytes);
    } else {
      img = await pdfDoc.embedPng(imageBytes);
    }

    const imgDims = img.scale(0.5);

    firstPage.drawImage(img, {
      x: width / 2 - imgDims.width / 2,
      y: height / 2 - imgDims.height / 2,
      width: imgDims.width,
      height: imgDims.height,
    });

    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    setUrl(URL.createObjectURL(blob));
  }

  async function downloadPdf() {
    if (!pdfDoc) return;
    const pdfBytes = await pdfDoc.save();
    const blob = new Blob([pdfBytes], { type: "application/pdf" });
    const a = document.createElement("a");
    a.href = URL.createObjectURL(blob);
    a.download = "edited.pdf";
    a.click();
  }
}
